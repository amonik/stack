ceilometer alarm-threshold-create --name cpu_high --description 'instance running hot'  \
     --meter-name cpu_util  --threshold 70.0 --comparison-operator gt  --statistic avg \
     --period 600 --evaluation-periods 3 \
     --alarm-action 'log://' \
     --query resource_id=<INSTANCE_ID>



ceilometer alarm-threshold-create --name bandwidth_high --description 'high incomming bytes'  \
     --meter-name network_incomming_packets  --threshold 148 --comparison-operator gt  --statistic avg \
     --period 15 --evaluation_periods 1 \
     --alarm-action 'log://' \
     --query resource_id=26842785-bcc6-4ae6-9ece-dc03e6f24ae5


#webserver create

MYIP=$(ifconfig eth0|grep 'inet addr'|awk -F: '{print $2}'| awk '{print $1}')
while true; do echo -e "HTTP/1.0 200 OK\r\n\r\nWelcome to $MYIP" | sudo nc -l -p 80 ; done&

name = 'cpu high', description = 'cpu theshold', meter_name = 'cpu_util', threshold = '30', comparison_operator = 'gt', period = '15', evaluation_periods = '1', alarm_action = 'log://', 'q:' 'resource_id =28ef2d49-89cc-486f-a2b6-5cafcc5ca02f'


alarmdict = {'name':'cpu high%s'%NovaID, 'description':'cpu theshold', 'meter_name':'cpu_util', 'threshold':'30', 'comparison_operator':'gt', 'period':'15', 'evaluation_periods':'1', 'alarm_action': 'log://',  'q':'resource_id =%s'%NovaID}

getCeilometer().alarms.create(aodh_enabled=True,**alarmdict)

getCeilometer().alarms.get_state(alarmID)

#If alarm is in 'alarm' state then use ceilometer alarm statistics to graph data using python matlibplot and call heat span new instance add it to vip group.



yum install openstack-heat-api openstack-heat-engine \
  openstack-heat-api-cfn


Ceilometer log file: 

sudo cat /etc/ceilometer/ceilometer.conf | grep log_dir

log_dir = /var/log/ceilometer

